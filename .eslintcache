[{"D:\\code\\apps\\js\\troy-huh.github.io\\src\\App.js":"1","D:\\code\\apps\\js\\troy-huh.github.io\\src\\components\\WPM.js":"2","D:\\code\\apps\\js\\troy-huh.github.io\\src\\components\\Input.js":"3"},{"size":846,"mtime":1606560571611,"results":"4","hashOfConfig":"5"},{"size":338,"mtime":1606561082869,"results":"6","hashOfConfig":"5"},{"size":1493,"mtime":1606560667483,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"b3ps0l",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"D:\\code\\apps\\js\\troy-huh.github.io\\src\\App.js",["16","17"],"import React from 'react';\nimport { renderIntoDocument } from 'react-dom/test-utils';\nimport './App.css';\n\nimport Input from './components/Input';\nimport WPM from './components/WPM';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.calculateWPM = this.calculateWPM.bind(this);\n\n    this.state = {\n      WPM: 0\n    }\n  }\n\n  calculateWPM(inp, time) {\n    const correct = 'nigger'.repeat(11);\n    let total = inp.length / 6;\n    for (let i = 0; i < inp.length; i++) {\n      if (inp.charAt(i) != correct.charAt(i)) {\n        total -= 1 / 6;\n      }\n    }\n\n    this.setState({\n      WPM: total / time\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <WPM WPM={this.state.WPM} />\n        <Input calculateWPM={(inp, time) => this.calculateWPM(inp, time)}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","D:\\code\\apps\\js\\troy-huh.github.io\\src\\components\\WPM.js",["18","19"],"D:\\code\\apps\\js\\troy-huh.github.io\\src\\components\\Input.js",["20","21","22"],"import React from 'react';\n\nimport './Input.css';\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      inp: '',\n      startTime: 0\n    };\n\n    this.changeGuideText = this.changeGuideText.bind(this);\n    this.getGuideText = this.getGuideText.bind(this);\n  }\n\n  changeGuideText(new_inp) {\n    if (new_inp.length == 1) {\n      this.setState({\n        startTime: Date.now()\n      });\n    }\n    this.setState({\n      inp: new_inp\n    });\n\n    const elapsedTimeMinutes = (Date.now() - this.state.startTime) / 60000\n    this.props.calculateWPM(new_inp, elapsedTimeMinutes);\n  }\n\n  getGuideText() {\n    const originalGuideText = 'nigger'.repeat(11)\n    return (\n      <div id='wrapper'>\n        {originalGuideText.slice(0, this.state.inp.length).split('').map((s, i) => {\n          return <span style={{ color: this.state.inp.charAt(i) == s ? 'green' : 'red' }} id='wrapItem'>{`${s}`}</span>\n        })}\n        {originalGuideText.slice(this.state.inp.length).split('').map(s => {\n          return <span style={{ color: 'black' }} id='wrapItem'>{`${s}`}</span>\n        })}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <a>\n        <form>\n          <input\n            type='text'\n            className='question'\n            onChange={e => this.changeGuideText(e.target.value)} />\n          <label for='nme'>\n            <span>{this.getGuideText()}</span>\n          </label>\n        </form>\n      </a>\n    );\n  }\n}\n\nexport default Input;\n",{"ruleId":"23","severity":1,"message":"24","line":2,"column":10,"nodeType":"25","messageId":"26","endLine":2,"endColumn":28},{"ruleId":"27","severity":1,"message":"28","line":23,"column":25,"nodeType":"29","messageId":"30","endLine":23,"endColumn":27},{"ruleId":"31","severity":1,"message":"32","line":8,"column":9,"nodeType":"33","endLine":8,"endColumn":79},{"ruleId":"31","severity":1,"message":"32","line":9,"column":9,"nodeType":"33","endLine":9,"endColumn":23},{"ruleId":"27","severity":1,"message":"34","line":19,"column":24,"nodeType":"29","messageId":"30","endLine":19,"endColumn":26},{"ruleId":"27","severity":1,"message":"34","line":37,"column":65,"nodeType":"29","messageId":"30","endLine":37,"endColumn":67},{"ruleId":"31","severity":1,"message":"32","line":48,"column":7,"nodeType":"33","endLine":48,"endColumn":10},"no-unused-vars","'renderIntoDocument' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","Expected '===' and instead saw '=='."]