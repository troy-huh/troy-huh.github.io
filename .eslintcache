[{"D:\\code\\apps\\js\\troy-huh.github.io\\src\\App.js":"1","D:\\code\\apps\\js\\troy-huh.github.io\\src\\components\\WPM.js":"2","D:\\code\\apps\\js\\troy-huh.github.io\\src\\components\\Input.js":"3","D:\\code\\apps\\js\\troy-huh.github.io\\src\\index.js":"4"},{"size":1028,"mtime":1606612355599,"results":"5","hashOfConfig":"6"},{"size":388,"mtime":1606611858967,"results":"7","hashOfConfig":"6"},{"size":2729,"mtime":1606612488130,"results":"8","hashOfConfig":"6"},{"size":168,"mtime":1606561612012,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"b3ps0l",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\code\\apps\\js\\troy-huh.github.io\\src\\App.js",["20"],"D:\\code\\apps\\js\\troy-huh.github.io\\src\\components\\WPM.js",["21","22"],"import React from 'react';\nimport './WPM.css';\n\nclass WPM extends React.Component {\n  render() {\n    return (\n      <h1 className='WPM' id='wrapper'>\n        <a style={{ color: this.props.WPM > 150 ? 'green' : 'red'}} id='left'>{Math.round(this.props.WPM)}</a>\n        <a id='right'> {`${this.props.guideWord.charAt(0).toUpperCase()}PM`}</a>\n      </h1>\n    );\n  }\n}\n\nexport default WPM;\n","D:\\code\\apps\\js\\troy-huh.github.io\\src\\components\\Input.js",["23"],"import React from 'react';\n\nimport './Input.css';\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const possibleGuideWords = ['nigger', 'kaleb', 'max', 'arveen', 'joon', 'brian']\n    this.state = {\n      possibleGuideWords: possibleGuideWords,\n      possibleEasterEggTriggers: possibleGuideWords.map(e => e.slice(0, e.length - 1)),\n      inp: '',\n      startTime: 0,\n      guideWord: 'nigger'\n    };\n\n    this.changeGuideText = this.changeGuideText.bind(this);\n    this.getGuideText = this.getGuideText.bind(this);\n    this.getInpText = this.getInpText.bind(this);\n    this.escEvent = this.escEvent.bind(this);\n  }\n\n  escEvent(event) {\n    if (event.keyCode === 27) {\n      this.setState({\n        inp: ''\n      });\n    }\n    this.props.calculateWPM(this.state.guideWord, this.state.inp, 1);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.escEvent, false);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.escEvent, false);\n  }\n\n  changeGuideText(new_inp) {\n    this.setState({\n      inp: (new_inp.length < 66 - (66 % this.state.guideWord.length)) ? new_inp : ''\n    });\n    if (this.state.inp.length === 0 || this.state.inp.length === 1) {\n      this.setState({\n        startTime: Date.now(),\n        easterEgg: ''\n      });\n    }\n    if (this.state.possibleEasterEggTriggers.includes(this.state.inp)) {\n      this.setState({\n        guideWord: this.state.possibleGuideWords[this.state.possibleEasterEggTriggers.indexOf(this.state.inp)]\n      });\n    }\n\n    const elapsedTimeMinutes = (Date.now() - this.state.startTime) / 60000;\n    this.props.calculateWPM(this.state.guideWord, this.state.inp, elapsedTimeMinutes);\n  }\n\n  getGuideText() {\n    const originalGuideText = this.state.guideWord.repeat(Math.round(66 / this.state.guideWord.length))\n    return (\n      <div id='wrapper'>\n        {originalGuideText.slice(0, this.state.inp.length).split('').map((s, i) => {\n          return <span style={{ color: this.state.inp.charAt(i) === s ? 'green' : 'red' }} id='wrapItem'>{`${s}`}</span>\n        })}\n        {originalGuideText.slice(this.state.inp.length).split('').map(s => {\n          return <span style={{ color: 'black' }} id='wrapItem'>{`${s}`}</span>\n        })}\n      </div>\n    );\n  }\n\n  getInpText() {\n    return this.state.inp;\n  }\n\n  render() {\n    return (\n      <a>\n        <form>\n          <input\n            type='text'\n            value={this.getInpText()}\n            className='question'\n            onChange={e => this.changeGuideText(e.target.value)} />\n          <label for='nme'>\n            <span>{this.getGuideText()}</span>\n          </label>\n        </form>\n      </a>\n    );\n  }\n}\n\nexport default Input;\n","D:\\code\\apps\\js\\troy-huh.github.io\\src\\index.js",[],{"ruleId":"24","severity":1,"message":"25","line":28,"column":25,"nodeType":"26","messageId":"27","endLine":28,"endColumn":27},{"ruleId":"28","severity":1,"message":"29","line":8,"column":9,"nodeType":"30","endLine":8,"endColumn":79},{"ruleId":"28","severity":1,"message":"29","line":9,"column":9,"nodeType":"30","endLine":9,"endColumn":23},{"ruleId":"28","severity":1,"message":"29","line":80,"column":7,"nodeType":"30","endLine":80,"endColumn":10},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]